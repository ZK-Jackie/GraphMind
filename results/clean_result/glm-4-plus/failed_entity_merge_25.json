{'task_id': None, 'task_system_prompt': '你是一名专业的知识提取助手，现在需要执行一个属性聚合任务。请遵循提供的模板和格式要求，提取两个实体的关键信息，并进行属性聚合。确保属性的准确性和完整性，删除重复内容后，生成正确、流畅的内容。完成后，以指定的JSON字符串格式输出结果。请开始执行任务。', 'task_user_prompt': '## 任务\n请从以下文本中提取两个实体的关键信息，并进行属性聚合。\n## 工作流程\n步骤1：从输入中提取两个实体的关键信息。\n步骤2：对每个实体的属性进行聚合。\n步骤3：聚合时尽可能保留多的属性信息，确保属性的准确性和完整性。\n步骤4：删去聚合后重复的内容，确保属性内容唯一性、简洁性。\n步骤5：将提取、聚合的内容以JSON字符串格式输出。\n## 输入内容\n### 实体1\n实体1名称：同态\n实体1属性：实体类型: 概念, 定义: 两个代数结构之间存在保运算的映射，将同构映射推广到一般映射的代数结构关系, 应用: 考察代数结构之间的联系, 特点: 不要求双射, name: 同态\n### 实体2\n实体2名称：同态\n实体2属性：实体类型: 概念, 定义: 设⟨A,*⟩和⟨B,∘⟩是任意两个给定的二元代数结构，如果存在集合A到集合B上的函数ψ，使得对于∀x1,x2∈A，有ψ(x1*x2)=ψ(x1)∘ψ(x2)，则称ψ是从⟨A,*⟩到⟨B,∘⟩的同态映射，并称⟨A,*⟩与⟨B,∘⟩同态，记为⟨A,*⟩∼⟨B,∘⟩, 分类: 若ψ为单射，则称⟨A,*⟩与⟨B,∘⟩为单同态；若ψ为满射，则称⟨A,*⟩与⟨B,∘⟩为满同态；若A=B，则称⟨A,*⟩与⟨B,∘⟩为满同态, name: 同态\n## 输出格式\n```json\n    {\n      "名称": "[实体名称]",\n      "属性": {\n        "[属性1]": "[属性值1]",\n        "[属性2]": "[属性值2]",\n        ...\n      }\n    }\n```', 'task_output': '### 步骤1：提取关键信息\n\n#### 实体1\n- 名称：同态\n- 属性：\n  - 实体类型: 概念\n  - 定义: 两个代数结构之间存在保运算的映射，将同构映射推广到一般映射的代数结构关系\n  - 应用: 考察代数结构之间的联系\n  - 特点: 不要求双射\n  - name: 同态\n\n#### 实体2\n- 名称：同态\n- 属性：\n  - 实体类型: 概念\n  - 定义: 设⟨A,*⟩和⟨B,∘⟩是任意两个给定的二元代数结构，如果存在集合A到集合B上的函数ψ，使得对于∀x1,x2∈A，有ψ(x1*x2)=ψ(x1)∘ψ(x2)，则称ψ是从⟨A,*⟩到⟨B,∘⟩的同态映射，并称⟨A,*⟩与⟨B,∘⟩同态，记为⟨A,*⟩∼⟨B,∘⟩\n  - 分类: 若ψ为单射，则称⟨A,*⟩与⟨B,∘⟩为单同态；若ψ为满射，则称⟨A,*⟩与⟨B,∘⟩为满同态；若A=B，则称⟨A,*⟩与⟨B,∘⟩为满同态\n  - name: 同态\n\n### 步骤2：属性聚合\n\n#### 聚合后的属性\n- 实体类型: 概念\n- 定义: \n  - 两个代数结构之间存在保运算的映射，将同构映射推广到一般映射的代数结构关系\n  - 设⟨A,*⟩和⟨B,∘⟩是任意两个给定的二元代数结构，如果存在集合A到集合B上的函数ψ，使得对于∀x1,x2∈A，有ψ(x1*x2)=ψ(x1)∘ψ(x2)，则称ψ是从⟨A,*⟩到⟨B,∘⟩的同态映射，并称⟨A,*⟩与⟨B,∘⟩同态，记为⟨A,*⟩∼⟨B,∘⟩\n- 应用: 考察代数结构之间的联系\n- 特点: 不要求双射\n- 分类: 若ψ为单射，则称⟨A,*⟩与⟨B,∘⟩为单同态；若ψ为满射，则称⟨A,*⟩与⟨B,∘⟩为满同态；若A=B，则称⟨A,*⟩与⟨B,∘⟩为满同态\n- name: 同态\n\n### 步骤3：删除重复内容\n\n#### 唯一性、简洁性处理\n- 实体类型: 概念\n- 定义: \n  - 两个代数结构之间存在保运算的映射，将同构映射推广到一般映射的代数结构关系。\n  - 设⟨A,*⟩和⟨B,∘⟩是任意两个给定的二元代数结构，如果存在集合A到集合B上的函数ψ，使得对于∀x1,x2∈A，有ψ(x1*x2)=ψ(x1)∘ψ(x2)，则称ψ是从⟨A,*⟩到⟨B,∘⟩的同态映射，并称⟨A,*⟩与⟨B,∘⟩同态，记为⟨A,*⟩∼⟨B,∘⟩。\n- 应用: 考察代数结构之间的联系\n- 特点: 不要求双射\n- 分类: 若ψ为单射，则称⟨A,*⟩与⟨B,∘⟩为单同态；若ψ为满射，则称⟨A,*⟩与⟨B,∘⟩为满同态；若A=B，则称⟨A,*⟩与⟨B,∘⟩为满同态\n\n### 步骤4：生成JSON字符串\n\n```json\n{\n  "名称": "同态",\n  "属性": {\n    "实体类型": "概念",\n    "定义": [\n      "两个代数结构之间存在保运算的映射，将同构映射推广到一般映射的代数结构关系。",\n      "设⟨A,*⟩和⟨B,∘⟩是任意两个给定的二元代数结构，如果存在集合A到集合B上的函数ψ，使得对于∀x1,x2∈A，有ψ(x1*x', 'task_status': 'PARSING_FAILED'}
